// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HouseAuction {
    address public admin;
    uint256 public houseCounter;
    
    struct House {
        uint256 id;
        string title;
        string description;
        string imageHash;
        uint256 startPrice;
        bool isActive;
        bool isStarted;
        bool isAuctionEnded;
        address highestBidder;
        uint256 highestBid;
    }
    
    mapping(uint256 => House) public houses;
    
    event HouseAdded(uint256 indexed id, string title, uint256 startPrice);
    event HouseUpdated(uint256 indexed id);
    event HouseDeleted(uint256 indexed id);
    event AuctionStarted(uint256 indexed id);
    event AuctionEnded(uint256 indexed id, address winner, uint256 amount);
    event BidPlaced(uint256 indexed id, address bidder, uint256 amount);
    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }
    
    modifier validHouseId(uint256 _id) {
        require(_id > 0 && _id <= houseCounter, "Invalid house ID");
        require(houses[_id].id == _id, "House does not exist");
        _;
    }
    
    constructor() {
        admin = msg.sender;
        houseCounter = 0;
    }
    
    function addHouse(
        string memory _title,
        string memory _description,
        string memory _imageHash,
        uint256 _startPrice
    ) external onlyAdmin {
        require(bytes(_title).length > 0, "Title cannot be empty");
        require(bytes(_description).length > 0, "Description cannot be empty");
        require(_startPrice > 0, "Start price must be greater than 0");
        
        houseCounter++;
        houses[houseCounter] = House({
            id: houseCounter,
            title: _title,
            description: _description,
            imageHash: _imageHash,
            startPrice: _startPrice,
            isActive: true,
            isStarted: false,
            isAuctionEnded: false,
            highestBidder: address(0),
            highestBid: 0
        });
        
        emit HouseAdded(houseCounter, _title, _startPrice);
    }
    
    function updateHouse(
        uint256 _id,
        string memory _title,
        string memory _description,
        string memory _imageHash,
        uint256 _startPrice
    ) external onlyAdmin validHouseId(_id) {
        require(!houses[_id].isStarted, "Cannot update house after auction started");
        require(bytes(_title).length > 0, "Title cannot be empty");
        require(bytes(_description).length > 0, "Description cannot be empty");
        require(_startPrice > 0, "Start price must be greater than 0");
        
        houses[_id].title = _title;
        houses[_id].description = _description;
        houses[_id].imageHash = _imageHash;
        houses[_id].startPrice = _startPrice;
        
        emit HouseUpdated(_id);
    }
    
    function deleteHouse(uint256 _id) external onlyAdmin validHouseId(_id) {
        require(!houses[_id].isStarted, "Cannot delete house after auction started");
        
        delete houses[_id];
        emit HouseDeleted(_id);
    }
    
    function startAuction(uint256 _id) external onlyAdmin validHouseId(_id) {
        require(houses[_id].isActive, "House is not active");
        require(!houses[_id].isStarted, "Auction already started");
        require(!houses[_id].isAuctionEnded, "Auction already ended");
        
        houses[_id].isStarted = true;
        emit AuctionStarted(_id);
    }
    
    function endAuction(uint256 _id) external onlyAdmin validHouseId(_id) {
        require(houses[_id].isStarted, "Auction not started");
        require(!houses[_id].isAuctionEnded, "Auction already ended");
        
        houses[_id].isAuctionEnded = true;
        emit AuctionEnded(_id, houses[_id].highestBidder, houses[_id].highestBid);
    }
    
    function toggleAuctionStatus(uint256 _id) external onlyAdmin validHouseId(_id) {
        require(!houses[_id].isStarted, "Cannot toggle status after auction started");
        houses[_id].isActive = !houses[_id].isActive;
    }
    
    function placeBid(uint256 _id) external payable validHouseId(_id) {
        House storage house = houses[_id];
        
        require(house.isActive, "House is not active");
        require(house.isStarted, "Auction not started");
        require(!house.isAuctionEnded, "Auction already ended");
        require(msg.value > house.startPrice, "Bid must be higher than start price");
        require(msg.value > house.highestBid, "Bid must be higher than current highest bid");
        
        // Return previous highest bidder's funds
        if (house.highestBidder != address(0)) {
            payable(house.highestBidder).transfer(house.highestBid);
        }
        
        house.highestBidder = msg.sender;
        house.highestBid = msg.value;
        
        emit BidPlaced(_id, msg.sender, msg.value);
    }
    
    function getHouse(uint256 _id) external view validHouseId(_id) returns (House memory) {
        return houses[_id];
    }
    
    // Emergency function to withdraw funds (only admin)
    function withdraw() external onlyAdmin {
        payable(admin).transfer(address(this).balance);
    }
}